{"version":3,"sources":["ng://ngx-tippy/lib/ngx-tippy.service.ts","ng://ngx-tippy/lib/ngx-tippy.directive.ts","ng://ngx-tippy/lib/ngx-tippy.module.ts"],"names":["NgxTippyService","prototype","setTippyState","name","state","this","_tippyTooltipStates","set","tippyTooltipStates","next","getTippyState","has","get","getAllTippies","hideTippy","popper","_tippy","hide","Injectable","args","providedIn","Map","BehaviorSubject","NgxTippyDirective","ngOnInit","tippyOptions","arrow","tippyInstance","tippy","el","nativeElement","console","log","undefined","shouldObserveState","Error","tippyDirectiveService","tippyName","ngOnDestroy","Directive","selector","ElementRef","Input","NgxTippyModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","exports"],"mappings":"obAAA,IAAAA,GAWEA,EAAAC,UAAAC,cAAA,SAAcC,EAAMC,GAClBC,KAAKC,oBAAoBC,IAAIJ,EAAMC,GACnCC,KAAKG,mBAAmBC,KAAKJ,KAAKC,sBAGpCN,EAAAC,UAAAS,cAAA,SAAcP,GACZ,OAAOE,KAAKC,oBAAoBK,IAAIR,GAAQE,KAAKC,oBAAoBM,IAAIT,GAAQ,MAGnFH,EAAAC,UAAAY,cAAA,WACE,OAAOR,KAAKC,qBAGdN,EAAAC,UAAAa,UAAA,SAAUX,GACJE,KAAKC,oBAAoBK,IAAIR,IAC/BE,KAAKC,oBAAoBM,IAAIT,GAAMY,OAAOC,OAAOC,4BAvBtDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,iHADd,SAAApB,IAKUK,KAAAC,oBAAsB,IAAIe,IAClChB,KAAAG,mBAAqB,IAAIc,EAAAA,gBAAgB,IAAID,KCT/C,IAAAE,GAqBSA,EAAAtB,UAAAuB,SAAP,eACQC,EAAepB,KAAKoB,cAAgB,CACxCtB,KAAM,MACNuB,OAAO,GAEHC,EAAgBC,EAAMvB,KAAKwB,GAAGC,cAAeL,GAInD,GAHApB,KAAKsB,cAAgBA,EACrBI,QAAQC,IAAI,aAAcL,GAEtBF,EAAatB,OAAS8B,WAAaR,EAAaS,mBAClD,MAAM,IAAIC,MAAM,sCAEhB9B,KAAK+B,sBAAsBlC,cACzBG,KAAKgC,UACLhC,KAAKsB,gBAKJJ,EAAAtB,UAAAqC,YAAP,WACEjC,KAAK+B,sBAAsBlC,cACzBG,KAAKgC,UACLhC,KAAKsB,oCAvCVY,EAAAA,UAASpB,KAAA,CAAC,CAETqB,SAAU,0DANkCC,EAAAA,kBACrCzC,2CASN0C,EAAAA,SAoCHnB,GAhCE,SAAAA,EACUM,EACAO,GADA/B,KAAAwB,GAAAA,EACAxB,KAAA+B,sBAAAA,EALV/B,KAAAgC,UAAY,KACZhC,KAAAsB,cAAgB,KAMdtB,KAAKwB,GAAKA,EClBd,IAAAc,GAiBgBA,EAAAC,QAAd,SAAsBC,GACpB,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT/C,EACA,CAAEgD,QAAS,SAAUC,SAAUJ,0BAjBtCK,EAAAA,SAAQ/B,KAAA,CAAC,CACRgC,aAAc,CACZ5B,GAEF6B,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACP/B,OAaJoB,GArBA,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxTippyService {\n\n  private _tippyTooltipStates = new Map();\n  tippyTooltipStates = new BehaviorSubject(new Map());\n\n  setTippyState(name, state): void {\n    this._tippyTooltipStates.set(name, state);\n    this.tippyTooltipStates.next(this._tippyTooltipStates);\n  }\n\n  getTippyState(name): any {\n    return this._tippyTooltipStates.has(name) ? this._tippyTooltipStates.get(name) : null;\n  }\n\n  getAllTippies(): any {\n    return this._tippyTooltipStates;\n  }\n\n  hideTippy(name): void {\n    if (this._tippyTooltipStates.has(name)) {\n      this._tippyTooltipStates.get(name).popper._tippy.hide();\n    }\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, ElementRef } from '@angular/core';\nimport { NgxTippyService } from './ngx-tippy.service';\nimport tippy from 'tippy.js';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxTippy]'\n})\nexport class NgxTippyDirective implements OnInit, OnDestroy {\n\n  @Input() tippyOptions: any;\n  tippyName = null;\n  tippyInstance = null;\n\n  constructor(\n    private el: ElementRef,\n    private tippyDirectiveService: NgxTippyService,\n  ) {\n    this.el = el;\n  }\n\n  public ngOnInit() {\n    const tippyOptions = this.tippyOptions || {\n      name: 'abc',\n      arrow: true,\n    };\n    const tippyInstance = tippy(this.el.nativeElement, tippyOptions);\n    this.tippyInstance = tippyInstance;\n    console.log('i am tippy', tippyInstance);\n\n    if (tippyOptions.name === undefined && tippyOptions.shouldObserveState) {\n      throw new Error('A name is required for the tooltip');\n    } else {\n      this.tippyDirectiveService.setTippyState(\n        this.tippyName,\n        this.tippyInstance\n      );\n    }\n  }\n\n  public ngOnDestroy() {\n    this.tippyDirectiveService.setTippyState(\n      this.tippyName,\n      this.tippyInstance\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxTippyDirective } from './ngx-tippy.directive';\nimport { NgxTippyService } from './ngx-tippy.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    NgxTippyDirective,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    NgxTippyDirective,\n  ]\n})\nexport class NgxTippyModule {\n  public static forRoot(config): ModuleWithProviders {\n    return {\n      ngModule: NgxTippyModule,\n      providers: [\n        NgxTippyService,\n        { provide: 'config', useValue: config }\n      ]\n    };\n  }\n}\n"]}